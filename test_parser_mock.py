#!/usr/bin/env python3
"""Mock Gemini responses ƒë·ªÉ test parser logic"""

import sys
import os
from pathlib import Path

# Add project root to path
ROOT_DIR = Path(__file__).resolve().parent
sys.path.insert(0, str(ROOT_DIR))

from infrastructure.ai.recipe_parser import RecipeParser
import json

def test_parser_with_mock_responses():
    """Test parser v·ªõi c√°c lo·∫°i response kh√°c nhau"""
    print("="*50)
    print("TESTING PARSER WITH MOCK RESPONSES")
    print("="*50)
    
    parser = RecipeParser()
    
    # Test case 1: Response c√≥ markdown code block (v·∫•n ƒë·ªÅ hi·ªán t·∫°i)
    mock_response_1 = """```json
{
  "title": "B√°nh Matcha Nh·∫≠t B·∫£n",
  "description": "B√°nh matcha th∆°m ngon v·ªõi h∆∞∆°ng v·ªã tr√† xanh ƒë·∫∑c tr∆∞ng",
  "ingredients": [
    {"name": "b·ªôt m√¨", "quantity": "200", "unit": "gram"},
    {"name": "ƒë∆∞·ªùng", "quantity": "150", "unit": "gram"},
    {"name": "tr·ª©ng", "quantity": "3", "unit": "qu·∫£"},
    {"name": "b∆°", "quantity": "100", "unit": "gram"},
    {"name": "b·ªôt matcha", "quantity": "2", "unit": "th√¨a canh"}
  ],
  "instructions": [
    "B∆∞·ªõc 1: Tr·ªôn b·ªôt m√¨, ƒë∆∞·ªùng v√† b·ªôt matcha",
    "B∆∞·ªõc 2: ƒê√°nh tr·ª©ng t∆°i v√† th√™m b∆° ƒë√£ tan",
    "B∆∞·ªõc 3: Tr·ªôn ƒë·ªÅu h·ªón h·ª£p v√† n∆∞·ªõng 25 ph√∫t"
  ],
  "prep_time": "20 ph√∫t",
  "cook_time": "25 ph√∫t", 
  "servings": "8 ph·∫ßn",
  "difficulty": "medium",
  "tags": ["matcha", "b√°nh ng·ªçt", "nh·∫≠t b·∫£n"]
}
```"""
    
    # Test case 2: Response pure JSON
    mock_response_2 = """{
  "title": "B√°nh Valentine Labubu",
  "description": "B√°nh ƒë·∫∑c bi·ªát cho Gen Z trong d·ªãp Valentine v·ªõi theme Labubu ƒë√°ng y√™u",
  "ingredients": [
    {"name": "b·ªôt m√¨", "quantity": "250", "unit": "gram"},
    {"name": "ƒë∆∞·ªùng h·ªìng", "quantity": "120", "unit": "gram"},
    {"name": "tr·ª©ng", "quantity": "2", "unit": "qu·∫£"},
    {"name": "b∆° l·∫°t", "quantity": "80", "unit": "gram"},
    {"name": "b·ªôt matcha", "quantity": "1", "unit": "th√¨a canh"},
    {"name": "m√†u th·ª±c ph·∫©m h·ªìng", "quantity": "5", "unit": "gi·ªçt"}
  ],
  "instructions": [
    "B∆∞·ªõc 1: Chu·∫©n b·ªã khu√¥n h√¨nh Labubu",
    "B∆∞·ªõc 2: Pha b·ªôt v·ªõi m√†u h·ªìng v√† matcha",
    "B∆∞·ªõc 3: N∆∞·ªõng v√† trang tr√≠ h√¨nh Labubu"
  ],
  "prep_time": "30 ph√∫t",
  "cook_time": "25 ph√∫t",
  "servings": "6 ph·∫ßn", 
  "difficulty": "medium",
  "tags": ["valentine", "labubu", "genz", "matcha"],
  "decoration_tips": "D√πng kem t∆∞∆°i h·ªìng v√† v·∫Ω m·∫∑t Labubu b·∫±ng chocolate",
  "marketing_caption": "üíï B√°nh Valentine Labubu si√™u cute cho couple GenZ! üß∏‚ú®"
}"""
    
    # Test case 3: Response b·ªã broken JSON
    mock_response_3 = """```json
{
  "title": "B√°nh Matcha",
  "description": "B√°nh th∆°m ngon
  "ingredients": [
    {"name": "b·ªôt m√¨", "quantity": "200", "unit": "gram"}
  ],
  "instructions": ["N∆∞·ªõng b√°nh"]
}
```"""
    
    # Test case 4: Response text format
    mock_response_4 = """
T√äN B√ÅNH: B√°nh Matcha Truy·ªÅn Th·ªëng

M√î T·∫¢: B√°nh matcha v·ªõi h∆∞∆°ng v·ªã ƒë·∫∑c tr∆∞ng c·ªßa tr√† xanh Nh·∫≠t B·∫£n

NGUY√äN LI·ªÜU:
- 200g b·ªôt m√¨
- 150g ƒë∆∞·ªùng 
- 3 qu·∫£ tr·ª©ng
- 100g b∆°
- 2 th√¨a canh b·ªôt matcha

C√ÅCH L√ÄM:
1. Tr·ªôn b·ªôt m√¨ v·ªõi b·ªôt matcha
2. ƒê√°nh tr·ª©ng v·ªõi ƒë∆∞·ªùng cho t∆°i
3. Th√™m b∆° ƒë√£ tan v√† tr·ªôn ƒë·ªÅu
4. N∆∞·ªõng ·ªü 180¬∞C trong 25 ph√∫t

TH·ªúI GIAN: Chu·∫©n b·ªã 20 ph√∫t, n∆∞·ªõng 25 ph√∫t
"""
    
    test_cases = [
        ("Markdown JSON (current issue)", mock_response_1),
        ("Pure JSON", mock_response_2), 
        ("Broken JSON", mock_response_3),
        ("Text format", mock_response_4)
    ]
    
    for name, response in test_cases:
        print(f"\n{'-'*30}")
        print(f"TEST: {name}")
        print(f"{'-'*30}")
        print(f"Input length: {len(response)}")
        print(f"First 100 chars: {repr(response[:100])}")
        
        try:
            parsed = parser.parse_gemini_output(response)
            print(f"‚úÖ Parsed successfully!")
            print(f"Title: {parsed.get('title', 'N/A')}")
            print(f"Ingredients count: {len(parsed.get('ingredients', []))}")
            print(f"Instructions count: {len(parsed.get('instructions', []))}")
            
            # Show full result
            print(f"\nFull parsed result:")
            print(json.dumps(parsed, indent=2, ensure_ascii=False))
            
        except Exception as e:
            print(f"‚ùå Failed: {e}")
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    test_parser_with_mock_responses()